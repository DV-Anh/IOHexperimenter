# This file is the configuration of IOHExperimenter.
# Users can run specific experiments by using this file and `user_algorithm.py` together.

# The configuration consist of three parts: [suite], [observer], and [triggers].
# It is highly recommended not to add or delete any sentences in the file.
# Modify the value of keys to suit expected experiments, otherwise keep them as default values.

# Suite is a collection of problems.
# Currently, ONLY `PBO` suite is avaiable, please do not modify the value of `suite_name`,
# unless a new suite is created. See `introduction` for developers to know how to created
# your own suite.
#
# `function_id` presents id of problems of the suite. For `PBO`:
# `1` is OneMax,
# `2` is LeadingOnes,
# `3` is Harmoic,
# `4` is OneMax with reduction of dummy variables (0.5n),
# `5` is OneMax with reduction of dummy variables (0.9n),
# `6` is OneMax with neutrality (3),
# `7` is OneMax with Epistasis (4),
# `8` is OneMax with a ruggedness transfermation,
# `9` is OneMax with a ruggedness transfermation,
# `10` is OneMax with a ruggedness transfermation,
# `11` is LeadingOnes with reduction of dummy variables (0.5n),
# `12` is LeadingOnes with reduction of dummy variables (0.9n),
# `13` is LeadingOnes with neutrality (3),
# `14` is LeadingOnes with Epistasis (4),
# `15` is LeadingOnes with a ruggedness transfermation,
# `16` is LeadingOnes with a ruggedness transfermation,
# `17` is LeadingOnes with a ruggedness transfermation,
# `18` is Low Autocorrelation Binary Sequences,
# `19` Ising-Ring,
# `20` Ising-Torus,
# `21` Ising-Triangular,
# `22` Maximum Independent Vertex Set,
# `23` N-Queens.
#
# The format of `function_id` can be `1,2,3,4`, using comma `,` to separate problems' id,
# or be `1-4`, using an en-dash `-` to present the range of problems' id. 
#
# `instances_id` presents id of instances. instances decide the transformer operations on
# problems. For `PBO`:
# `1` : no transformer operations on the problem.
# `2-50` :  XOR and SHIFT operations are applied on the problem.
# `51-100`: SIGMA and SHIFT operations are applied on the problem.
# The format of `instances_id` can be `1,2,3,4`, using comma `,` to separate instances' id,
# or be `1-100`, using an en-dash `-` to present the range of instances' id. 
# All parameters of operations are generated with pseudo random numbers.
# See details in https://arxiv.org/abs/1810.05281 .
#
# `dimensions` presents dimensions of problems. It is not supported to set sepecfic dimensions 
# for each problem, which means all selected problems will be tested with the same dimensions.
# The format of `dimensions` is as `500,1000,1500`. The allowed maximum dimension is 20000.

[suite]
suite_name = PBO
functions_id = 1-3
instances_id = 1-100
dimensions = 100


# Observer is about the setting of output files.
# Currently, ONLY `PBO` observer is avaiable, please do not modify the value of `observer_name`,
# unless a new observer is created. See `introduction` for developers to know how to created
# your own observer.
#
# `result_folder` is the name of folder where stores output files. If the folder doesnot exist,
# a new folder will be created in current path.
#
# `algorithms_name` and `algorithm_info` are additional information of algorithms. It will be used
# when generating the `.info` files.
#
# ATTENTION! Blank space is not avaiable for values of keys. For the option `parameter_name`,
# please use comma `,` to separate names, and names are not allowed to conclude black space ` `.
# For example, to set names of three parameters, parameters_name should be `para1,para2,para3` 
# without any blank.

[observer]
observer_name = PBO
result_folder = RANDOM_SEARCH
algorithm_name = random_search
algorithm_info = random_search
parameters_name = EVALUATIONS

# Triggers are parameters for different output files. Values of triggers will effect the output
# of corresponding output files.
#
# `complete_triggers` is the switch of `.cdat` files, which will store evaluations of all iterations.
# Set `complete_triggers` as `TRUE` or `true` if you want to output `.cdat` files.
#
# both `number_target_triggers` and `base_evaluation_triggers` effect `.tdat`. 
# `base_evaluation_triggers` defines the base evaluations used to produce an additional
# evaluation-based logging. For example, if `base_evaluation_triggers` = `1,2,5`, the logger will be 
# triggered by evaluations dim*1, dim*2, dim*5, 10*dim*1, 10*dim*2, 10*dim*5, 100*dim*1, 100*dim*2, 
# 100*dim*5, ... . If you do not want to generate `.tdat` files, set `base_evaluation_triggers` as ``.
# `number_target_triggers` works on `*.dat` files. It is a value defines the number of targets between
# 10^i and 10^(i+1). If you do not want to generate `.dat` files, set `number_target_triggers` as 0.
#
# `number_interval_triggers` is for `.idat` files, which will store evaluations by a fixed interval.
# Set `complete_trigger` as 0 if you want to output `.idat` files.

[triggers]
complete_triggers = true
number_target_triggers = 3
base_evaluation_triggers = 1,2,5
number_interval_triggers = 10