<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.19">
  <compounddef id="md_src__suites__r_e_a_d_m_e" kind="page">
    <compoundname>md_src_Suites_README</compoundname>
    <title>Suites of IOHexperimenter</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ulink url="/src/Template/IOHprofiler_suite.hpp">IOHprofiler_suite</ulink> is the base <computeroutput>class</computeroutput> of suites of <bold>IOHexperimenter</bold>. The property variables of problems include:<itemizedlist>
<listitem><para><computeroutput>problem_id</computeroutput>, a vector containing the ids of the problems to be tested.</para>
</listitem><listitem><para><computeroutput>instance_id</computeroutput>, a vector containing the ids of the instances of the problems. Intance ids specify which transformations will be applied to the problem. The original problem has instance_id 1; <emphasis>scale</emphasis> and <emphasis>shift</emphasis> are applied on objectives for instance_id in [2,100]; <emphasis>XOR</emphasis> will be applied on variables for instance_id in [2,50], and <emphasis>sigma</emphasis> function is applied on variables for instance_id in [51,100].</para>
</listitem><listitem><para><computeroutput>dimension</computeroutput>, a vector containing the dimensions of the problems.</para>
</listitem><listitem><para><computeroutput>number_of_problems</computeroutput></para>
</listitem><listitem><para><computeroutput>number_of_instances</computeroutput></para>
</listitem><listitem><para><computeroutput>number_of_dimensions</computeroutput></para>
</listitem></itemizedlist>
</para>
<para>The following functions for experiments are available to a suite:<itemizedlist>
<listitem><para><emphasis>get_next_problem</emphasis>, return a shared point of problems of the suite in order.</para>
</listitem><listitem><para><emphasis>addCSVLogger(logger)</emphasis>, assigns a <bold><ref refid="class_i_o_hprofiler__csv__logger" kindref="compound">IOHprofiler_csv_logger</ref></bold> class to the suite.</para>
</listitem><listitem><para><emphasis>IOHprofiler_set_suite_problem_id(problem_id)</emphasis></para>
</listitem><listitem><para><emphasis>IOHprofiler_set_suite_instance_id(instance_id)</emphasis></para>
</listitem><listitem><para><emphasis>IOHprofiler_set_suite_dimension(dimension)</emphasis></para>
</listitem><listitem><para><emphasis>mapIDTOName</emphasis>, is to match problem id and name.</para>
</listitem></itemizedlist>
</para>
<sect2 id="md_src__suites__r_e_a_d_m_e_1autotoc_md3">
<title>Creating a suite</title>
<para><bold>IOHexperimenter</bold> provides a <bold><ref refid="class_p_b_o__suite" kindref="compound">PBO_suite</ref></bold> for pseudo Boolean problems, but it is also easy to add your own suite. Creating a suite is done by registering problems in the suite and assigning ids to them.</para>
<para>Taking the implementation of <bold><ref refid="class_p_b_o__suite" kindref="compound">PBO_suite</ref></bold> as an example, <emphasis>constructor functions</emphasis> are as below. In the constructor functions, the range of allowed <computeroutput>problem_id</computeroutput>, <computeroutput>instance_id</computeroutput> and <computeroutput>dimension</computeroutput> should be identified. In addition, <emphasis>registerProblem()</emphasis> must be included in the constructor functions. <programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="class_p_b_o__suite" kindref="compound">PBO_suite</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>problem_id;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>instance_id;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>dimension;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>23;<sp/>++i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>problem_id.push_back(i+1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>instance_id.push_back(i+1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>dimension.push_back(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IOHprofiler_set_suite_problem_id(problem_id);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IOHprofiler_set_suite_instance_id(instance_id);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IOHprofiler_set_suite_dimension(dimension);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IOHprofiler_set_suite_name(</highlight><highlight class="stringliteral">&quot;PBO&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>registerProblem();</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="class_p_b_o__suite" kindref="compound">PBO_suite</ref>(std::vector&lt;int&gt;<sp/>problem_id,<sp/>std::vector&lt;int&gt;<sp/>instance_id,<sp/>std::vector&lt;int&gt;<sp/>dimension)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>problem_id.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(problem_id[i]<sp/>&lt;<sp/>0<sp/>||<sp/>problem_id[i]<sp/>&gt;<sp/>23)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IOH_error(</highlight><highlight class="stringliteral">&quot;problem_id<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(problem_id[i])<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>not<sp/>in<sp/>PBO_suite&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>instance_id.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(instance_id[i]<sp/>&lt;<sp/>0<sp/>||<sp/>instance_id[i]<sp/>&gt;<sp/>100)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IOH_error(</highlight><highlight class="stringliteral">&quot;instance_id<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(instance_id[i])<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>not<sp/>in<sp/>PBO_suite&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dimension.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dimension[i]<sp/>&lt;<sp/>0<sp/>||<sp/>dimension[i]<sp/>&gt;<sp/>20000)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IOH_error(</highlight><highlight class="stringliteral">&quot;dimension<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dimension[i])<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>not<sp/>in<sp/>PBO_suite&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IOHprofiler_set_suite_problem_id(problem_id);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IOHprofiler_set_suite_instance_id(instance_id);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IOHprofiler_set_suite_dimension(dimension);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IOHprofiler_set_suite_name(</highlight><highlight class="stringliteral">&quot;PBO&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>registerProblem();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><emphasis>registerProblem()</emphasis> is a virtual function of the base <computeroutput><ref refid="class_i_o_hprofiler__suite" kindref="compound">IOHprofiler_suite</ref></computeroutput> class. When you create a suite, it <bold>must</bold> be implemented. Problems to be included in the suite can be registered by name. Afterwards, problem id and name should be mapped through <emphasis>mapIDTOName&gt;</emphasis> function, which enables the suite to recognize problems by problem id. Following is the <emphasis>registerProblem()</emphasis> function of <bold><ref refid="class_p_b_o__suite" kindref="compound">PBO_suite</ref></bold>. <programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classregister_in_factory" kindref="compound">registerInFactory&lt;IOHprofiler_problem&lt;int&gt;</ref>,<ref refid="class_one_max" kindref="compound">OneMax</ref>&gt;<sp/>regOneMax(</highlight><highlight class="stringliteral">&quot;OneMax&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classregister_in_factory" kindref="compound">registerInFactory&lt;IOHprofiler_problem&lt;int&gt;</ref>,<ref refid="class_one_max___dummy1" kindref="compound">OneMax_Dummy1</ref>&gt;<sp/>regOneMax_Dummy1(</highlight><highlight class="stringliteral">&quot;OneMax_Dummy1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classregister_in_factory" kindref="compound">registerInFactory&lt;IOHprofiler_problem&lt;int&gt;</ref>,<ref refid="class_one_max___dummy2" kindref="compound">OneMax_Dummy2</ref>&gt;<sp/>regOneMax_Dummy2(</highlight><highlight class="stringliteral">&quot;OneMax_Dummy2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classregister_in_factory" kindref="compound">registerInFactory&lt;IOHprofiler_problem&lt;int&gt;</ref>,<ref refid="class_one_max___epistasis" kindref="compound">OneMax_Epistasis</ref>&gt;<sp/>regOneMax_Epistasis(</highlight><highlight class="stringliteral">&quot;OneMax_Epistasis&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classregister_in_factory" kindref="compound">registerInFactory&lt;IOHprofiler_problem&lt;int&gt;</ref>,<ref refid="class_one_max___neutrality" kindref="compound">OneMax_Neutrality</ref>&gt;<sp/>regOneMax_Neutrality(</highlight><highlight class="stringliteral">&quot;OneMax_Neutrality&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classregister_in_factory" kindref="compound">registerInFactory&lt;IOHprofiler_problem&lt;int&gt;</ref>,<ref refid="class_one_max___ruggedness1" kindref="compound">OneMax_Ruggedness1</ref>&gt;<sp/>regOneMax_Ruggedness1(</highlight><highlight class="stringliteral">&quot;OneMax_Ruggedness1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classregister_in_factory" kindref="compound">registerInFactory&lt;IOHprofiler_problem&lt;int&gt;</ref>,<ref refid="class_one_max___ruggedness2" kindref="compound">OneMax_Ruggedness2</ref>&gt;<sp/>regOneMax_Ruggedness2(</highlight><highlight class="stringliteral">&quot;OneMax_Ruggedness2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classregister_in_factory" kindref="compound">registerInFactory&lt;IOHprofiler_problem&lt;int&gt;</ref>,<ref refid="class_one_max___ruggedness3" kindref="compound">OneMax_Ruggedness3</ref>&gt;<sp/>regOneMax_Ruggedness3(</highlight><highlight class="stringliteral">&quot;OneMax_Ruggedness3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classregister_in_factory" kindref="compound">registerInFactory&lt;IOHprofiler_problem&lt;int&gt;</ref>,<ref refid="class_leading_ones" kindref="compound">LeadingOnes</ref>&gt;<sp/>regLeadingOnes(</highlight><highlight class="stringliteral">&quot;LeadingOnes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classregister_in_factory" kindref="compound">registerInFactory&lt;IOHprofiler_problem&lt;int&gt;</ref>,<ref refid="class_leading_ones___dummy1" kindref="compound">LeadingOnes_Dummy1</ref>&gt;<sp/>regLeadingOnes_Dummy1(</highlight><highlight class="stringliteral">&quot;LeadingOnes_Dummy1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classregister_in_factory" kindref="compound">registerInFactory&lt;IOHprofiler_problem&lt;int&gt;</ref>,<ref refid="class_leading_ones___dummy2" kindref="compound">LeadingOnes_Dummy2</ref>&gt;<sp/>regLeadingOnes_Dummy2(</highlight><highlight class="stringliteral">&quot;LeadingOnes_Dummy2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classregister_in_factory" kindref="compound">registerInFactory&lt;IOHprofiler_problem&lt;int&gt;</ref>,<ref refid="class_leading_ones___epistasis" kindref="compound">LeadingOnes_Epistasis</ref>&gt;<sp/>regLeadingOnes_Epistasis(</highlight><highlight class="stringliteral">&quot;LeadingOnes_Epistasis&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classregister_in_factory" kindref="compound">registerInFactory&lt;IOHprofiler_problem&lt;int&gt;</ref>,<ref refid="class_leading_ones___neutrality" kindref="compound">LeadingOnes_Neutrality</ref>&gt;<sp/>regLeadingOnes_Neutrality(</highlight><highlight class="stringliteral">&quot;LeadingOnes_Neutrality&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classregister_in_factory" kindref="compound">registerInFactory&lt;IOHprofiler_problem&lt;int&gt;</ref>,<ref refid="class_leading_ones___ruggedness1" kindref="compound">LeadingOnes_Ruggedness1</ref>&gt;<sp/>regLeadingOnes_Ruggedness1(</highlight><highlight class="stringliteral">&quot;LeadingOnes_Ruggedness1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classregister_in_factory" kindref="compound">registerInFactory&lt;IOHprofiler_problem&lt;int&gt;</ref>,<ref refid="class_leading_ones___ruggedness2" kindref="compound">LeadingOnes_Ruggedness2</ref>&gt;<sp/>regLeadingOnes_Ruggedness2(</highlight><highlight class="stringliteral">&quot;LeadingOnes_Ruggedness2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classregister_in_factory" kindref="compound">registerInFactory&lt;IOHprofiler_problem&lt;int&gt;</ref>,<ref refid="class_leading_ones___ruggedness3" kindref="compound">LeadingOnes_Ruggedness3</ref>&gt;<sp/>regLeadingOnes_Ruggedness3(</highlight><highlight class="stringliteral">&quot;LeadingOnes_Ruggedness3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classregister_in_factory" kindref="compound">registerInFactory&lt;IOHprofiler_problem&lt;int&gt;</ref>,<ref refid="class_linear" kindref="compound">Linear</ref>&gt;<sp/>regLinear(</highlight><highlight class="stringliteral">&quot;Linear&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classregister_in_factory" kindref="compound">registerInFactory&lt;IOHprofiler_problem&lt;int&gt;</ref>,<ref refid="class_m_i_s" kindref="compound">MIS</ref>&gt;<sp/>regMIS(</highlight><highlight class="stringliteral">&quot;MIS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classregister_in_factory" kindref="compound">registerInFactory&lt;IOHprofiler_problem&lt;int&gt;</ref>,<ref refid="class_l_a_b_s" kindref="compound">LABS</ref>&gt;<sp/>regLABS(</highlight><highlight class="stringliteral">&quot;LABS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classregister_in_factory" kindref="compound">registerInFactory&lt;IOHprofiler_problem&lt;int&gt;</ref>,<ref refid="class_n_queens" kindref="compound">NQueens</ref>&gt;<sp/>regNQueens(</highlight><highlight class="stringliteral">&quot;NQueens&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classregister_in_factory" kindref="compound">registerInFactory&lt;IOHprofiler_problem&lt;int&gt;</ref>,Ising_1D&gt;<sp/>regIsing_1D(</highlight><highlight class="stringliteral">&quot;Ising_1D&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classregister_in_factory" kindref="compound">registerInFactory&lt;IOHprofiler_problem&lt;int&gt;</ref>,Ising_2D&gt;<sp/>regIsing_2D(</highlight><highlight class="stringliteral">&quot;Ising_2D&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classregister_in_factory" kindref="compound">registerInFactory&lt;IOHprofiler_problem&lt;int&gt;</ref>,Ising_Triangle&gt;<sp/>regIsing_Triangle(</highlight><highlight class="stringliteral">&quot;Ising_Triangle&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">mapIDTOName(1,</highlight><highlight class="stringliteral">&quot;OneMax&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">mapIDTOName(2,</highlight><highlight class="stringliteral">&quot;LeadingOnes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">mapIDTOName(3,</highlight><highlight class="stringliteral">&quot;Linear&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">mapIDTOName(4,</highlight><highlight class="stringliteral">&quot;OneMax_Dummy1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">mapIDTOName(5,</highlight><highlight class="stringliteral">&quot;OneMax_Dummy2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">mapIDTOName(6,</highlight><highlight class="stringliteral">&quot;OneMax_Neutrality&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">mapIDTOName(7,</highlight><highlight class="stringliteral">&quot;OneMax_Epistasis&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">mapIDTOName(8,</highlight><highlight class="stringliteral">&quot;OneMax_Ruggedness1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">mapIDTOName(9,</highlight><highlight class="stringliteral">&quot;OneMax_Ruggedness2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">mapIDTOName(10,</highlight><highlight class="stringliteral">&quot;OneMax_Ruggedness3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">mapIDTOName(11,</highlight><highlight class="stringliteral">&quot;LeadingOnes_Dummy1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">mapIDTOName(12,</highlight><highlight class="stringliteral">&quot;LeadingOnes_Dummy2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">mapIDTOName(13,</highlight><highlight class="stringliteral">&quot;LeadingOnes_Neutrality&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">mapIDTOName(14,</highlight><highlight class="stringliteral">&quot;LeadingOnes_Epistasis&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">mapIDTOName(15,</highlight><highlight class="stringliteral">&quot;LeadingOnes_Ruggedness1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">mapIDTOName(16,</highlight><highlight class="stringliteral">&quot;LeadingOnes_Ruggedness2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">mapIDTOName(17,</highlight><highlight class="stringliteral">&quot;LeadingOnes_Ruggedness3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">mapIDTOName(18,</highlight><highlight class="stringliteral">&quot;LABS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">mapIDTOName(22,</highlight><highlight class="stringliteral">&quot;MIS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">mapIDTOName(19,</highlight><highlight class="stringliteral">&quot;Ising_1D&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">mapIDTOName(20,</highlight><highlight class="stringliteral">&quot;Ising_2D&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">mapIDTOName(21,</highlight><highlight class="stringliteral">&quot;Ising_Triangle&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">mapIDTOName(23,</highlight><highlight class="stringliteral">&quot;NQueens&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>If you want to register your suite called <computeroutput>suite_name</computeroutput>, please add following codes and modify names. <programlisting filename=".cpp"><codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_p_b_o__suite" kindref="compound">PBO_suite</ref><sp/>*<sp/>createInstance()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_p_b_o__suite" kindref="compound">PBO_suite</ref>();</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_p_b_o__suite" kindref="compound">PBO_suite</ref><sp/>*<sp/>createInstance(std::vector&lt;int&gt;<sp/>problem_id,<sp/>std::vector&lt;int&gt;<sp/>instance_id,<sp/>std::vector&lt;int&gt;<sp/>dimension)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_p_b_o__suite" kindref="compound">PBO_suite</ref>(problem_id,<sp/>instance_id,<sp/>dimension);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para>To register the suite, you can use the <emphasis><ref refid="classgeneric_generator" kindref="compound">genericGenerator</ref></emphasis> in <ulink url="/src/Template/">IOHprofiler_class_generator</ulink>. For example, you can use the following statement to register and create <bold><ref refid="class_p_b_o__suite" kindref="compound">PBO_suite</ref></bold> , <programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>Register</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classregister_in_factory" kindref="compound">registerInFactory&lt;IOHprofiler_suite&lt;int&gt;</ref>,<ref refid="class_p_b_o__suite" kindref="compound">PBO_suite</ref>&gt;<sp/>regPBO(</highlight><highlight class="stringliteral">&quot;PBO&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::shared_ptr&lt;IOHprofiler_suite&lt;InputType&gt;&gt;<sp/>suite<sp/>=<sp/><ref refid="classgeneric_generator" kindref="compound">genericGenerator&lt;IOHprofiler_suite&lt;int&gt;</ref>&gt;::instance().create(</highlight><highlight class="stringliteral">&quot;PBO&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
</sect2>
    </detaileddescription>
  </compounddef>
</doxygen>
