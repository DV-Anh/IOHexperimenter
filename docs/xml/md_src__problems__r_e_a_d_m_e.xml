<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.19">
  <compounddef id="md_src__problems__r_e_a_d_m_e" kind="page">
    <compoundname>md_src_Problems_README</compoundname>
    <title>Problems of IOHexperimenter</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ulink url="/src/Template/IOHprofiler_problem.hpp">IOHprofiler_problem</ulink> is the base <computeroutput>class</computeroutput> of problems of <bold>IOHexperimenter</bold>. The property variables of problems include:<itemizedlist>
<listitem><para><computeroutput>problem_id</computeroutput>, will be assigned if the problem is added to a suite, otherwise default by 0.</para>
</listitem><listitem><para><computeroutput>instance_id</computeroutput>, sets transformation methods on problems. The original problem is with instance_id 1, <emphasis>scale</emphasis> and <emphasis>shift</emphasis> are applied on objectives for instance_id in [2,100], <emphasis>XOR</emphasis> is applied on variables for instance_id in [2,50], and <emphasis>sigma</emphasis> function is applied on variables for instance_id in [51,100].</para>
</listitem><listitem><para><computeroutput>problem_name</computeroutput></para>
</listitem><listitem><para><computeroutput>problem_type</computeroutput></para>
</listitem><listitem><para><computeroutput>lowerbound</computeroutput>, is a vector of lowerbound for variables.</para>
</listitem><listitem><para><computeroutput>upperbound</computeroutput>, is a vector of upperbound for variables.</para>
</listitem><listitem><para><computeroutput>number_of_variables</computeroutput>, is the dimension of the problem.</para>
</listitem><listitem><para><computeroutput>number_of_objectives</computeroutput>, is only available as 1 now. The functionality of multi-objectives is under development.</para>
</listitem><listitem><para><computeroutput>best_variables</computeroutput>, is a vector of optimal solution, which is used to calculate the optimum. If the best_variables is not given, the optimum will be set as <bold>DBL_MAX</bold>.</para>
</listitem><listitem><para><computeroutput>optimal</computeroutput>, is a vector of optimal objectives, but currently only single objective is supported.</para>
</listitem><listitem><para><computeroutput>evaluate_int_info</computeroutput>, is a vector of <bold>int</bold> values that are iteratively used in <emphasis>evaluate</emphasis>.</para>
</listitem><listitem><para><computeroutput>evaluate_double_info</computeroutput>, is a vector of <bold>double</bold> values that are iteratively used in <emphasis>evaluate</emphasis>.</para>
</listitem></itemizedlist>
</para>
<para>And some functions for personal experiments are supplied:<itemizedlist>
<listitem><para><emphasis>evaluate(x)</emphasis>, returns a vector of fitness values. The argument <bold>x</bold> is a vector of variables.</para>
</listitem><listitem><para><emphasis>evaluate(x,y)</emphasis>, updates <bold>y</bold> with a vector of fitness values, and <bold>x</bold> is a vector of variables.</para>
</listitem><listitem><para><emphasis>addCSVLogger(logger)</emphasis>, assigns a <bold><ref refid="class_i_o_hprofiler__csv__logger" kindref="compound">IOHprofiler_csv_logger</ref></bold> class to the problem.</para>
</listitem><listitem><para><emphasis>clearLogger()</emphasis>, delete logger methods of the problem.</para>
</listitem><listitem><para><emphasis>reset_problem()</emphasis>, reset the history information of problem evaluations. You should call this function at first when you plan to do another test on the same problem class.</para>
</listitem><listitem><para><emphasis>IOHprofiler_hit_optimal()</emphasis>, returns true if the optimum of the problem has been found.</para>
</listitem><listitem><para><emphasis>IOHprofiler_set_number_of_variables(number_of_variables)</emphasis>, sets dimension of the problem.</para>
</listitem><listitem><para><emphasis>IOHprofiler_set_instance_id(instance_id)</emphasis></para>
</listitem></itemizedlist>
</para>
<sect2 id="md_src__problems__r_e_a_d_m_e_1autotoc_md1">
<title>Creating a problem</title>
<para><bold>IOHexperimenter</bold> provides a variety of problems for testing algorithms, but it is also easy to add your own problems. Overall, to create a problem of <bold>IOHexperimenter</bold>, two functions need to be implemented: <emphasis>construct functions</emphasis> and <emphasis>internel_evaluate</emphasis>. Additionally, you can define <emphasis>update_evaluate_double_info</emphasis> and <emphasis>update_evaluate_int_info</emphasis> to make evluate process more efficiently.</para>
<para>Taking the implementation of <bold><ref refid="class_one_max" kindref="compound">OneMax</ref></bold> as an instance, <emphasis>construct functions</emphasis> are as below. <computeroutput>problem_name</computeroutput> and <computeroutput>number_of_objectives</computeroutput> <bold>must</bold> be set. In general, two methods of construction of the problems are given. One is constructing without giving <computeroutput>instance_id</computeroutput> and <computeroutput>dimension</computeroutput>, and the other one is with. <programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="class_one_max" kindref="compound">OneMax</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IOHprofiler_set_problem_name(</highlight><highlight class="stringliteral">&quot;OneMax&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IOHprofiler_set_problem_type(</highlight><highlight class="stringliteral">&quot;pseudo_Boolean_problem&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IOHprofiler_set_number_of_objectives(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IOHprofiler_set_lowerbound(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IOHprofiler_set_upperbound(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IOHprofiler_set_best_variables(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="class_one_max" kindref="compound">OneMax</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>instance_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimension)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IOHprofiler_set_instance_id(instance_id);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IOHprofiler_set_problem_name(</highlight><highlight class="stringliteral">&quot;OneMax&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IOHprofiler_set_problem_type(</highlight><highlight class="stringliteral">&quot;pseudo_Boolean_problem&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IOHprofiler_set_number_of_objectives(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IOHprofiler_set_lowerbound(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IOHprofiler_set_upperbound(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IOHprofiler_set_best_variables(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Initilize_problem(dimension);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">~<ref refid="class_one_max" kindref="compound">OneMax</ref>()<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Initilize_problem(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimension)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IOHprofiler_set_number_of_variables(dimension);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IOHprofiler_set_optimal((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)dimension);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para>The <emphasis>internal_evaluate</emphasis> <bold>must</bold> be implemented as well. It is used during evaluate process, returning a vector of (real) objective values of the corresponding variables <bold>x</bold>. <programlisting filename=".cpp"><codeline><highlight class="normal">std::vector&lt;double&gt;<sp/>internal_evaluate(std::vector&lt;int&gt;<sp/>x)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>y;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>x.size();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>x[i];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>y.push_back((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)result);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para>If you want to register your problem by <computeroutput>problem_name</computeroutput> and add it into a suite, please add functions creating instances as following codes. <programlisting filename=".cpp"><codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_one_max" kindref="compound">OneMax</ref><sp/>*<sp/>createInstance()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_one_max" kindref="compound">OneMax</ref>();</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_one_max" kindref="compound">OneMax</ref><sp/>*<sp/>createInstance(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>instance_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimension)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_one_max" kindref="compound">OneMax</ref>(instance_id,<sp/>dimension);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para>To register the problem, you can use the <emphasis>geniricGenerator</emphasis> in <ulink url="/src/Template/">IOHprofiler_class_generator</ulink>. For example, you can use the following statement to register and create <bold><ref refid="class_one_max" kindref="compound">OneMax</ref></bold> , <programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>Register</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classregister_in_factory" kindref="compound">registerInFactory&lt;IOHprofiler_problem&lt;int&gt;</ref>,<ref refid="class_one_max" kindref="compound">OneMax</ref>&gt;<sp/>regOneMax(</highlight><highlight class="stringliteral">&quot;OneMax&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::shared_ptr&lt;IOHprofiler_problem&lt;int&gt;&gt;<sp/>problem<sp/>=<sp/><ref refid="classgeneric_generator" kindref="compound">genericGenerator&lt;IOHprofiler_problem&lt;int&gt;</ref>&gt;::instance().create(</highlight><highlight class="stringliteral">&quot;OneMax&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
</sect2>
    </detaileddescription>
  </compounddef>
</doxygen>
