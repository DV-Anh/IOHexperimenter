<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.19">
  <compounddef id="wmodels_8hpp" kind="file" language="C++">
    <compoundname>wmodels.hpp</compoundname>
    <includes refid="_i_o_hprofiler__random_8h" local="yes">IOHprofiler_random.h</includes>
    <includedby refid="f__leading__ones__dummy1_8hpp" local="yes">src/Problems/PBO/f_leading_ones_dummy1.hpp</includedby>
    <includedby refid="f__leading__ones__dummy2_8hpp" local="yes">src/Problems/PBO/f_leading_ones_dummy2.hpp</includedby>
    <includedby refid="f__leading__ones__epistasis_8hpp" local="yes">src/Problems/PBO/f_leading_ones_epistasis.hpp</includedby>
    <includedby refid="f__leading__ones__neutrality_8hpp" local="yes">src/Problems/PBO/f_leading_ones_neutrality.hpp</includedby>
    <includedby refid="f__leading__ones__ruggedness1_8hpp" local="yes">src/Problems/PBO/f_leading_ones_ruggedness1.hpp</includedby>
    <includedby refid="f__leading__ones__ruggedness2_8hpp" local="yes">src/Problems/PBO/f_leading_ones_ruggedness2.hpp</includedby>
    <includedby refid="f__leading__ones__ruggedness3_8hpp" local="yes">src/Problems/PBO/f_leading_ones_ruggedness3.hpp</includedby>
    <includedby refid="f__one__max__dummy1_8hpp" local="yes">src/Problems/PBO/f_one_max_dummy1.hpp</includedby>
    <includedby refid="f__one__max__dummy2_8hpp" local="yes">src/Problems/PBO/f_one_max_dummy2.hpp</includedby>
    <includedby refid="f__one__max__epistasis_8hpp" local="yes">src/Problems/PBO/f_one_max_epistasis.hpp</includedby>
    <includedby refid="f__one__max__neutrality_8hpp" local="yes">src/Problems/PBO/f_one_max_neutrality.hpp</includedby>
    <includedby refid="f__one__max__ruggedness1_8hpp" local="yes">src/Problems/PBO/f_one_max_ruggedness1.hpp</includedby>
    <includedby refid="f__one__max__ruggedness2_8hpp" local="yes">src/Problems/PBO/f_one_max_ruggedness2.hpp</includedby>
    <includedby refid="f__one__max__ruggedness3_8hpp" local="yes">src/Problems/PBO/f_one_max_ruggedness3.hpp</includedby>
    <includedby refid="f__w__model__leading__ones_8hpp" local="yes">src/Problems/WModel/f_w_model_leading_ones.hpp</includedby>
    <includedby refid="f__w__model__one__max_8hpp" local="yes">src/Problems/WModel/f_w_model_one_max.hpp</includedby>
    <incdepgraph>
      <node id="6">
        <label>sys/stat.h</label>
      </node>
      <node id="18">
        <label>limits</label>
      </node>
      <node id="1">
        <label>src/Problems/common_used_functions/wmodels.hpp</label>
        <link refid="wmodels_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>cmath</label>
      </node>
      <node id="14">
        <label>cassert</label>
      </node>
      <node id="12">
        <label>string</label>
      </node>
      <node id="22">
        <label>map</label>
      </node>
      <node id="19">
        <label>cfloat</label>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="10">
        <label>fstream</label>
      </node>
      <node id="3">
        <label>IOHprofiler_common.h</label>
        <link refid="_i_o_hprofiler__common_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>unistd.h</label>
      </node>
      <node id="13">
        <label>vector</label>
      </node>
      <node id="11">
        <label>sstream</label>
      </node>
      <node id="16">
        <label>cstdlib</label>
      </node>
      <node id="9">
        <label>iostream</label>
      </node>
      <node id="2">
        <label>IOHprofiler_random.h</label>
        <link refid="_i_o_hprofiler__random_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>cstddef</label>
      </node>
      <node id="4">
        <label>IOHprofiler_platform.h</label>
        <link refid="_i_o_hprofiler__platform_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>algorithm</label>
      </node>
      <node id="21">
        <label>memory</label>
      </node>
      <node id="8">
        <label>dirent.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="8">
        <label>src/Problems/PBO/f_leading_ones_epistasis.hpp</label>
        <link refid="f__leading__ones__epistasis_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>src/Problems/PBO/f_leading_ones_neutrality.hpp</label>
        <link refid="f__leading__ones__neutrality_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>src/Problems/PBO/f_one_max_ruggedness3.hpp</label>
        <link refid="f__one__max__ruggedness3_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>src/Problems/PBO/f_one_max_dummy2.hpp</label>
        <link refid="f__one__max__dummy2_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>src/Problems/PBO/f_leading_ones_ruggedness1.hpp</label>
        <link refid="f__leading__ones__ruggedness1_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/Problems/common_used_functions/wmodels.hpp</label>
        <link refid="wmodels_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>src/Problems/PBO/f_one_max_epistasis.hpp</label>
        <link refid="f__one__max__epistasis_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>src/Problems/IOHprofiler_all_problems.hpp</label>
        <link refid="_i_o_hprofiler__all__problems_8hpp_source"/>
      </node>
      <node id="16">
        <label>src/Problems/PBO/f_one_max_neutrality.hpp</label>
        <link refid="f__one__max__neutrality_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>src/Template/Experiments/IOHprofiler_experimenter.h</label>
        <link refid="_i_o_hprofiler__experimenter_8h_source"/>
      </node>
      <node id="4">
        <label>src/Suites/IOHprofiler_PBO_suite.hpp</label>
        <link refid="_i_o_hprofiler___p_b_o__suite_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>src/Problems/PBO/f_leading_ones_dummy2.hpp</label>
        <link refid="f__leading__ones__dummy2_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>src/Problems/WModel/f_w_model_leading_ones.hpp</label>
        <link refid="f__w__model__leading__ones_8hpp"/>
      </node>
      <node id="5">
        <label>src/Suites/IOHprofiler_all_suites.hpp</label>
        <link refid="_i_o_hprofiler__all__suites_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/Problems/PBO/f_leading_ones_dummy1.hpp</label>
        <link refid="f__leading__ones__dummy1_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>src/Problems/PBO/f_one_max_dummy1.hpp</label>
        <link refid="f__one__max__dummy1_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>src/Problems/PBO/f_leading_ones_ruggedness2.hpp</label>
        <link refid="f__leading__ones__ruggedness2_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>src/Problems/PBO/f_leading_ones_ruggedness3.hpp</label>
        <link refid="f__leading__ones__ruggedness3_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>src/Problems/WModel/f_w_model_one_max.hpp</label>
        <link refid="f__w__model__one__max_8hpp"/>
      </node>
      <node id="17">
        <label>src/Problems/PBO/f_one_max_ruggedness1.hpp</label>
        <link refid="f__one__max__ruggedness1_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>src/Problems/PBO/f_one_max_ruggedness2.hpp</label>
        <link refid="f__one__max__ruggedness2_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="wmodels_8hpp_1a6aa24f3d58b0d0287ce31d2dbd042e38" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>static std::vector&lt;int&gt; dummy</definition>
        <argsstring>(int number_of_variables, double select_rate, long inseed)</argsstring>
        <name>dummy</name>
        <param>
          <type>int</type>
          <declname>number_of_variables</declname>
        </param>
        <param>
          <type>double</type>
          <declname>select_rate</declname>
        </param>
        <param>
          <type>long</type>
          <declname>inseed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This is a stl algorithm.</para>
        </inbodydescription>
        <location file="src/Problems/common_used_functions/wmodels.hpp" line="14" column="20" bodyfile="src/Problems/common_used_functions/wmodels.hpp" bodystart="14" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="wmodels_8hpp_1a5f4f8e331ba2945653c5d531f66c869c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>static std::vector&lt;int&gt; neutrality</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;variables, int mu)</argsstring>
        <name>neutrality</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>variables</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Problems/common_used_functions/wmodels.hpp" line="46" column="20" bodyfile="src/Problems/common_used_functions/wmodels.hpp" bodystart="46" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="wmodels_8hpp_1a58127eac2344302678c4f407d95ab379" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>static std::vector&lt;int&gt; epistasis</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;variables, int v)</argsstring>
        <name>epistasis</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>variables</declname>
        </param>
        <param>
          <type>int</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Problems/common_used_functions/wmodels.hpp" line="69" column="20" bodyfile="src/Problems/common_used_functions/wmodels.hpp" bodystart="69" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="wmodels_8hpp_1a1c7149337617e29e31e8d9d46e7c3e27" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>static double ruggedness1</definition>
        <argsstring>(double y, int number_of_variables)</argsstring>
        <name>ruggedness1</name>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>number_of_variables</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Problems/common_used_functions/wmodels.hpp" line="115" column="15" bodyfile="src/Problems/common_used_functions/wmodels.hpp" bodystart="115" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="wmodels_8hpp_1a7644a9a22570f976f067ecd88b9133da" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>static double ruggedness2</definition>
        <argsstring>(double y, int number_of_variables)</argsstring>
        <name>ruggedness2</name>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>number_of_variables</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Problems/common_used_functions/wmodels.hpp" line="131" column="15" bodyfile="src/Problems/common_used_functions/wmodels.hpp" bodystart="131" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="wmodels_8hpp_1a4588aad185275cd09ca179c48a308b34" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>static std::vector&lt;double&gt; ruggedness3</definition>
        <argsstring>(int number_of_variables)</argsstring>
        <name>ruggedness3</name>
        <param>
          <type>int</type>
          <declname>number_of_variables</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Problems/common_used_functions/wmodels.hpp" line="151" column="20" bodyfile="src/Problems/common_used_functions/wmodels.hpp" bodystart="151" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="wmodels_8hpp_1a3ad2109730fb6c43eb4701a174904eb8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void layer_neutrality_compute</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;xIn, std::vector&lt; int &gt; &amp;xOut, const int mu)</argsstring>
        <name>layer_neutrality_compute</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>xIn</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>xOut</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>mu</declname>
        </param>
        <briefdescription>
<para>Following is the w-model soure code from Raphael&apos;s work, which refer the source code of Thomas Weise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Problems/common_used_functions/wmodels.hpp" line="168" column="13" bodyfile="src/Problems/common_used_functions/wmodels.hpp" bodystart="168" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="wmodels_8hpp_1ab7cc65be3009deafdccbba60680d6b8e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void base_epistasis</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;xIn, const int start, const int nu, std::vector&lt; int &gt; &amp;xOut)</argsstring>
        <name>base_epistasis</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>xIn</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>nu</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>xOut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Problems/common_used_functions/wmodels.hpp" line="197" column="13" bodyfile="src/Problems/common_used_functions/wmodels.hpp" bodystart="197" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="wmodels_8hpp_1a9b2f198cb3a7d5a1d0ab685d7b294b99" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void epistasis_compute</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;xIn, std::vector&lt; int &gt; &amp;xOut, const int nu)</argsstring>
        <name>epistasis_compute</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>xIn</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>xOut</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>nu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Problems/common_used_functions/wmodels.hpp" line="216" column="13" bodyfile="src/Problems/common_used_functions/wmodels.hpp" bodystart="216" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="wmodels_8hpp_1aa75e8574d6c8a0a4f2eaf774593bdc03" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void layer_epistasis_compute</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;x, std::vector&lt; int &gt; &amp;epistasis_x, const int block_size)</argsstring>
        <name>layer_epistasis_compute</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>epistasis_x</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>block_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Problems/common_used_functions/wmodels.hpp" line="228" column="13" bodyfile="src/Problems/common_used_functions/wmodels.hpp" bodystart="228" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="wmodels_8hpp_1a2b2e96781c20bed1da12e65041e511eb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int max_gamma</definition>
        <argsstring>(int q)</argsstring>
        <name>max_gamma</name>
        <param>
          <type>int</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Problems/common_used_functions/wmodels.hpp" line="232" column="12" bodyfile="src/Problems/common_used_functions/wmodels.hpp" bodystart="232" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="wmodels_8hpp_1a053536933e3f58002ddbb4655def7f36" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>static std::vector&lt;int&gt; ruggedness_raw</definition>
        <argsstring>(int gamma, int q)</argsstring>
        <name>ruggedness_raw</name>
        <param>
          <type>int</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Problems/common_used_functions/wmodels.hpp" line="236" column="20" bodyfile="src/Problems/common_used_functions/wmodels.hpp" bodystart="236" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="wmodels_8hpp_1a929033aaad173c3ee686e151a1c5f047" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ruggedness_translate</definition>
        <argsstring>(int gamma, int q)</argsstring>
        <name>ruggedness_translate</name>
        <param>
          <type>int</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Problems/common_used_functions/wmodels.hpp" line="290" column="12" bodyfile="src/Problems/common_used_functions/wmodels.hpp" bodystart="290" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="wmodels_8hpp_1ad1eef8bddb659c142c117d814f51f464" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>static double layer_compute_ruggedness</definition>
        <argsstring>(const double y, size_t dimension, int gamma)</argsstring>
        <name>layer_compute_ruggedness</name>
        <param>
          <type>const double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dimension</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gamma</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Problems/common_used_functions/wmodels.hpp" line="316" column="15" bodyfile="src/Problems/common_used_functions/wmodels.hpp" bodystart="316" bodyend="326"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>_F_WMODELS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_F_WMODELS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;IOHprofiler_random.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>dummy(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_variables,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>select_rate,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>inseed)<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>position;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>random_index;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>random_numbers;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>select_num<sp/>=<sp/>(int)floor((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)(number_of_variables<sp/>*<sp/>select_rate));</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>position.reserve(number_of_variables);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>number_of_variables;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>position.push_back(i);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>IOHprofiler_random::IOHprofiler_uniform_rand((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)select_num,inseed,random_numbers);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>select_num;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>random_index.push_back((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)floor(random_numbers[i]<sp/>*<sp/>1e4<sp/>/<sp/>1e4<sp/>*<sp/>number_of_variables));</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>select_num;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>position[i];</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>position[i]<sp/>=<sp/>position[random_index[i]];</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>position[random_index[i]]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>sort(position.begin(),position.begin()+select_num);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>random_index.clear();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>select_num;<sp/>++i){</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>random_index.push_back(position[i]);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>random_index;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>neutrality(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>&amp;variables,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mu)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_variables<sp/>=<sp/>variables.size();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>(int)floor((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)number_of_variables/(double)mu);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>new_variables;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>new_variables.reserve(n);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>temp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>number_of_variables)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>+=<sp/>variables[i];</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i+1)<sp/>%<sp/>mu<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>i<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(temp<sp/>&gt;=<sp/>mu<sp/>/<sp/>2.0)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_variables.push_back(1);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_variables.push_back(0);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_variables;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>epistasis(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>&amp;variables,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/>epistasis_result;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_variables<sp/>=<sp/>variables.size();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>new_variables;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>new_variables.reserve(number_of_variables);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>h<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(h<sp/>+<sp/>v<sp/>-<sp/>1<sp/>&lt;<sp/>number_of_variables)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i<sp/>&lt;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>epistasis_result<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>v;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((v<sp/>-<sp/>j<sp/>-<sp/>1)<sp/>!=<sp/>((v<sp/>-<sp/>i<sp/>-<sp/>1)<sp/>-<sp/>1)<sp/>%<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(epistasis_result<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epistasis_result<sp/>=<sp/>variables[h+j];</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epistasis_result<sp/>=<sp/>(epistasis_result<sp/>!=<sp/>variables[h+j]);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>new_variables.push_back(epistasis_result);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/>+=<sp/>v;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(number_of_variables<sp/>-<sp/>h<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>number_of_variables<sp/>-<sp/>h;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>epistasis_result<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>v;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((v<sp/>-<sp/>j<sp/>-<sp/>1)<sp/>!=<sp/>((v<sp/>-<sp/>i<sp/>-<sp/>1)<sp/>-<sp/>1)<sp/>%<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(epistasis_result<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epistasis_result<sp/>=<sp/>variables[h+j];</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epistasis_result<sp/>=<sp/>(epistasis_result<sp/>!=<sp/>variables[h+j]);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>new_variables.push_back(epistasis_result);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/>+=<sp/>v;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_variables;</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ruggedness1(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_variables)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ruggedness_y,<sp/>s;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>s<sp/>=<sp/>(double)number_of_variables;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(y<sp/>==<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>ruggedness_y<sp/>=<sp/>ceil(y/2.0)<sp/>+<sp/>1.0;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>s<sp/>&amp;&amp;<sp/>number_of_variables<sp/>%<sp/>2<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>ruggedness_y<sp/>=<sp/>floor(y<sp/>/<sp/>2.0)<sp/>+<sp/>1.0;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>s<sp/>&amp;&amp;<sp/>number_of_variables<sp/>%<sp/>2<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>ruggedness_y<sp/>=<sp/>ceil(y<sp/>/<sp/>2.0)<sp/>+<sp/>1.0;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>ruggedness_y<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(y<sp/>&lt;=<sp/>s);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ruggedness_y;</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ruggedness2(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_variables)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ruggedness_y;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tempy=(int)(y+0.5);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tempy<sp/>==<sp/>number_of_variables)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>ruggedness_y<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tempy<sp/>&lt;<sp/>number_of_variables<sp/>&amp;&amp;<sp/>tempy<sp/>%<sp/>2<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>number_of_variables<sp/>%<sp/>2<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>ruggedness_y<sp/>=<sp/>y<sp/>+<sp/>1.0;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tempy<sp/>&lt;<sp/>number_of_variables<sp/>&amp;&amp;<sp/>tempy<sp/>%<sp/>2<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>number_of_variables<sp/>%<sp/>2<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>ruggedness_y<sp/>=<sp/>(y<sp/>-<sp/>1.0)<sp/>&gt;<sp/>0<sp/>?<sp/>(y<sp/>-<sp/>1.0)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tempy<sp/>&lt;<sp/>number_of_variables<sp/>&amp;&amp;<sp/>tempy<sp/>%<sp/>2<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>number_of_variables<sp/>%<sp/>2<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>ruggedness_y<sp/>=<sp/>(y<sp/>-<sp/>1.0)<sp/>&gt;<sp/>0<sp/>?<sp/>(y<sp/>-<sp/>1.0)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tempy<sp/>&lt;<sp/>number_of_variables<sp/>&amp;&amp;<sp/>tempy<sp/>%<sp/>2<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>number_of_variables<sp/>%<sp/>2<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>ruggedness_y<sp/>=<sp/>y<sp/>+<sp/>1.0;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>ruggedness_y<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(tempy<sp/>&lt;=<sp/>number_of_variables);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ruggedness_y;</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;<sp/>ruggedness3(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_variables)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>ruggedness_fitness(number_of_variables+1,0.0);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>1;<sp/>j<sp/>&lt;=<sp/>number_of_variables/5;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>5;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ruggedness_fitness[number_of_variables-5*j+k]<sp/>=<sp/>(double)(number_of_variables<sp/>-<sp/>5<sp/>*<sp/>j<sp/>+<sp/>(4-k));</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>number_of_variables<sp/>-<sp/>number_of_variables<sp/>/<sp/>5<sp/>*<sp/>5;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>ruggedness_fitness[k]<sp/>=<sp/>(double)(number_of_variables<sp/>-<sp/>number_of_variables<sp/>/<sp/>5<sp/>*<sp/>5<sp/>-<sp/>1<sp/>-<sp/>k);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>ruggedness_fitness[number_of_variables]<sp/>=<sp/>(double)number_of_variables;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ruggedness_fitness;</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>layer_neutrality_compute(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>&amp;xIn,<sp/>std::vector&lt;int&gt;<sp/>&amp;xOut,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mu){</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thresholdFor1<sp/>=<sp/>(mu<sp/>&gt;&gt;<sp/>1)<sp/>+<sp/>(mu<sp/>&amp;<sp/>1);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,ones,flush;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>xIn.size();</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp_dim<sp/>=<sp/>dim<sp/>/<sp/>mu;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xOut.size()<sp/>!=<sp/>temp_dim)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>xOut.resize(temp_dim);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>i=0;j=0;<sp/>ones=0;<sp/>flush=mu;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((i<sp/>&lt;<sp/>dim)<sp/>&amp;&amp;<sp/>(j&lt;temp_dim)){</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xIn[i]==1)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ones+=1;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>i+=1;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>flush)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flush+=mu;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ones<sp/>&gt;=<sp/>thresholdFor1)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp=1;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp=0;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xOut[j]=temp;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j+=1;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ones=0;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>base_epistasis(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>&amp;xIn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nu,<sp/>std::vector&lt;int&gt;<sp/>&amp;xOut)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>(start<sp/>+<sp/>nu)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flip<sp/>=<sp/>xIn[start];</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>skip<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>end<sp/>;<sp/>i<sp/>&gt;=<sp/>start;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>flip;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>end;<sp/>j<sp/>&gt;<sp/>start;<sp/>--j)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>!=<sp/>skip)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>^=<sp/>(xIn[j]);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>xOut[i]<sp/>=<sp/>result;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((--skip)<sp/>&lt;<sp/>start)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>skip<sp/>=<sp/>end;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>epistasis_compute(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/><sp/>&amp;xIn,<sp/>std::vector&lt;int&gt;<sp/>&amp;xOut,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nu)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>xIn.size();</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>length<sp/>-<sp/>nu;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>end;<sp/>i<sp/>+=<sp/>nu)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base_epistasis(xIn,<sp/>i,<sp/>nu,<sp/>xOut);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base_epistasis(xIn,<sp/>i,<sp/>length<sp/>-<sp/>i,<sp/>xOut);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>layer_epistasis_compute(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>&amp;x,<sp/>std::vector&lt;int&gt;<sp/>&amp;epistasis_x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>block_size)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>epistasis_compute(x,epistasis_x,block_size);</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_gamma(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>q)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)((q<sp/>*<sp/>(q<sp/>-<sp/>1))&gt;&gt;1);</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>ruggedness_raw(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gamma,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>q){</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,k,start,max;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>upper;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">/*fprintf(stderr,&quot;gamma<sp/>:<sp/>%d\n&quot;,gamma);</highlight></codeline>
<codeline lineno="241"><highlight class="comment">fprintf(stderr,&quot;q<sp/>:<sp/>%d\n&quot;,q);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>r(q+1,0);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/>r[0]=0;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/>max<sp/>=<sp/>max_gamma(q);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gamma<sp/>&lt;=<sp/>0){</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>q<sp/>-<sp/>1<sp/>-<sp/>(int)<sp/>(0.5<sp/>+<sp/>sqrt(0.25<sp/>+<sp/>((max<sp/>-<sp/>gamma)&lt;&lt;1)));</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="251"><highlight class="comment">fprintf(stderr,&quot;part1<sp/>:<sp/>%d\n&quot;,((int)(0.25<sp/>+<sp/>((max<sp/>-<sp/>gamma)&lt;&lt;1))));</highlight></codeline>
<codeline lineno="252"><highlight class="comment">fprintf(stderr,&quot;part2<sp/>:<sp/>%f\n&quot;,(sqrt((int)(0.25<sp/>+<sp/>((max<sp/>-<sp/>gamma)&lt;&lt;1)))));</highlight></codeline>
<codeline lineno="253"><highlight class="comment">fprintf(stderr,&quot;part3<sp/>:<sp/>%d\n&quot;,(int)(0.5<sp/>+<sp/>sqrt((int)(0.25<sp/>+<sp/>((max<sp/>-<sp/>gamma)&lt;&lt;1)))));*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">/*fprintf(stderr,&quot;start<sp/>%d\n&quot;,start);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">/*for(i=0;i&lt;q;i++){fprintf(stderr,&quot;%d.&quot;,r[i]);}fprintf(stderr,&quot;\n&quot;);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>1;<sp/>j<sp/>&lt;=<sp/>start;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((j<sp/>&amp;<sp/>1)<sp/>!=<sp/>0){<sp/>r[j]<sp/>=<sp/>(q<sp/>-<sp/>k);}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{k=k+1;<sp/>r[j]<sp/>=<sp/>k;}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">/*for(i=0;i&lt;q;i++){fprintf(stderr,&quot;%d.&quot;,r[i]);}fprintf(stderr,&quot;\n&quot;);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>j<sp/>&lt;=<sp/>q;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k=k+1;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((start<sp/>&amp;<sp/>1)<sp/>!=<sp/>0){r[j]<sp/>=<sp/>(q<sp/>-<sp/>k);}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{r[j]=k;}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>upper<sp/>=<sp/>((gamma<sp/>-<sp/>max)<sp/>+(((q<sp/>-<sp/>start<sp/>-<sp/>1)<sp/>*<sp/>(q<sp/>-<sp/>start))<sp/>&gt;&gt;<sp/>1));</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>j--;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">/*for(i=0;i&lt;q;i++){fprintf(stderr,&quot;%d.&quot;,r[i]);}fprintf(stderr,&quot;\n&quot;);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment">/*fprintf(stderr,&quot;upper<sp/>%d\n&quot;,upper);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>upper;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j=j-1;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j&gt;0){</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>r[j];</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r[j]<sp/>=<sp/>r[q];</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r[q]<sp/>=<sp/>t;}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment">/*fprintf(stderr,&quot;r\n&quot;);</highlight></codeline>
<codeline lineno="282"><highlight class="comment">for(i=0;i&lt;=q;i++){fprintf(stderr,&quot;%d<sp/>%d\n&quot;,i,<sp/>r[i]);}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>r2(q+1,0);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;=q;i++){r2[i]=q-r[q-i];}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment">/*fprintf(stderr,&quot;r2\n&quot;);</highlight></codeline>
<codeline lineno="286"><highlight class="comment">for(i=0;i&lt;=q;i++){fprintf(stderr,&quot;%d<sp/>%d\n&quot;,i,<sp/>r2[i]);}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r2;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ruggedness_translate(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gamma,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>q)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,<sp/>k,<sp/>max,<sp/>g,<sp/>lastUpper;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gamma<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>g<sp/>=<sp/>gamma;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>max<sp/>=<sp/>max_gamma(q);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>lastUpper<sp/>=<sp/>((q<sp/>&gt;&gt;<sp/>1)<sp/>*<sp/>((q<sp/>+<sp/>1)<sp/>&gt;&gt;<sp/>1));</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g<sp/>&lt;=<sp/>lastUpper)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>abs(((q<sp/>+<sp/>2)<sp/>*<sp/>0.5)-sqrt((((q<sp/>*<sp/>q)<sp/>*<sp/>0.25)<sp/>+<sp/>1)<sp/>-<sp/>g));</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>((g<sp/>-<sp/>((q<sp/>+<sp/>2)<sp/>*<sp/>j))<sp/>+<sp/>(j<sp/>*<sp/>j)<sp/>+<sp/>q);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((k<sp/>+<sp/>1<sp/>+<sp/>((((q<sp/>+<sp/>2)<sp/>*<sp/>j)<sp/>-<sp/>(j<sp/>*<sp/>j)<sp/>-<sp/>q<sp/>-<sp/>1)<sp/>&lt;&lt;<sp/>1))-<sp/>(j<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>j<sp/>=<sp/>abs((((q<sp/>%<sp/>2)<sp/>+<sp/>1)<sp/>*<sp/>0.5)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>sqrt((((1<sp/>-<sp/>(q<sp/>%<sp/>2))<sp/>*<sp/>0.25)<sp/>+<sp/>g)<sp/>-<sp/>1<sp/>-<sp/>lastUpper));</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>g<sp/>-<sp/>(((j<sp/>-<sp/>(q<sp/>%<sp/>2))<sp/>*<sp/>(j<sp/>-<sp/>1))<sp/>+<sp/>1<sp/>+<sp/>lastUpper);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(max<sp/>-<sp/>k<sp/>-<sp/>((2<sp/>*<sp/>j<sp/>*<sp/>j)<sp/>-<sp/>j)<sp/>-<sp/>((q<sp/>%<sp/>2)<sp/>*<sp/>((-2<sp/>*<sp/>j)<sp/>+<sp/>1)));</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>layer_compute_ruggedness(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dimension,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gamma){</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>r=ruggedness_raw(ruggedness_translate(gamma,<sp/>dimension),<sp/>dimension);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>result=r[<sp/>(int)y<sp/>];</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*for(i=0;i&lt;dimension+1;i++){fprintf(stderr,&quot;%d<sp/>&quot;,r[i]);}fprintf(stderr,&quot;\n&quot;);</highlight></codeline>
<codeline lineno="322"><highlight class="comment"></highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/><sp/>fprintf(stderr,&quot;dim<sp/>%d<sp/>val<sp/>%f,<sp/>result<sp/>%f\n&quot;,dimension,y,result);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>assert(result<sp/>&lt;=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>dimension);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/Problems/common_used_functions/wmodels.hpp"/>
  </compounddef>
</doxygen>
