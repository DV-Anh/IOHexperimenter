<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.19">
  <compounddef id="coco__transformation__vars_8hpp" kind="file" language="C++">
    <compoundname>coco_transformation_vars.hpp</compoundname>
    <includes refid="suite__bbob__legacy__code_8hpp" local="yes">suite_bbob_legacy_code.hpp</includes>
    <includedby refid="coco__transformation_8hpp" local="yes">src/Problems/BBOB/bbob_common_used_functions/coco_transformation.hpp</includedby>
    <incdepgraph>
      <node id="7">
        <label>sys/stat.h</label>
      </node>
      <node id="19">
        <label>limits</label>
      </node>
      <node id="16">
        <label>cmath</label>
      </node>
      <node id="15">
        <label>cassert</label>
      </node>
      <node id="13">
        <label>string</label>
      </node>
      <node id="23">
        <label>map</label>
      </node>
      <node id="20">
        <label>cfloat</label>
      </node>
      <node id="6">
        <label>stddef.h</label>
      </node>
      <node id="11">
        <label>fstream</label>
      </node>
      <node id="4">
        <label>IOHprofiler_common.h</label>
        <link refid="_i_o_hprofiler__common_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>unistd.h</label>
      </node>
      <node id="14">
        <label>vector</label>
      </node>
      <node id="12">
        <label>sstream</label>
      </node>
      <node id="17">
        <label>cstdlib</label>
      </node>
      <node id="10">
        <label>iostream</label>
      </node>
      <node id="3">
        <label>IOHprofiler_random.h</label>
        <link refid="_i_o_hprofiler__random_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>cstddef</label>
      </node>
      <node id="2">
        <label>suite_bbob_legacy_code.hpp</label>
        <link refid="suite__bbob__legacy__code_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>IOHprofiler_platform.h</label>
        <link refid="_i_o_hprofiler__platform_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/Problems/BBOB/bbob_common_used_functions/coco_transformation_vars.hpp</label>
        <link refid="coco__transformation__vars_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>algorithm</label>
      </node>
      <node id="22">
        <label>memory</label>
      </node>
      <node id="9">
        <label>dirent.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="42">
        <label>src/Problems/PBO/f_leading_ones_epistasis.hpp</label>
        <link refid="f__leading__ones__epistasis_8hpp"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>src/Problems/BBOB/f_rastrigin.hpp</label>
        <link refid="f__rastrigin_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>src/Problems/PBO/f_leading_ones.hpp</label>
        <link refid="f__leading__ones_8hpp"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>src/Problems/BBOB/f_rosenbrock.hpp</label>
        <link refid="f__rosenbrock_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>src/Problems/PBO/f_leading_ones_neutrality.hpp</label>
        <link refid="f__leading__ones__neutrality_8hpp"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>src/Problems/BBOB/f_different_powers.hpp</label>
        <link refid="f__different__powers_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>src/Problems/PBO/f_one_max_ruggedness3.hpp</label>
        <link refid="f__one__max__ruggedness3_8hpp"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>src/Problems/BBOB/f_ellipsoid_rotated.hpp</label>
        <link refid="f__ellipsoid__rotated_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>src/Template/Loggers/IOHprofiler_csv_logger.h</label>
        <link refid="_i_o_hprofiler__csv__logger_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>src/Problems/PBO/f_one_max_dummy2.hpp</label>
        <link refid="f__one__max__dummy2_8hpp"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>src/Problems/PBO/f_leading_ones_ruggedness1.hpp</label>
        <link refid="f__leading__ones__ruggedness1_8hpp"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>src/Problems/PBO/f_ising_torus.hpp</label>
        <link refid="f__ising__torus_8hpp"/>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>src/Problems/BBOB/f_katsuura.hpp</label>
        <link refid="f__katsuura_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>src/Suites/IOHprofiler_BBOB_suite.hpp</label>
        <link refid="_i_o_hprofiler___b_b_o_b__suite_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>src/Template/IOHprofiler_problem.h</label>
        <link refid="_i_o_hprofiler__problem_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>src/Problems/PBO/f_one_max_epistasis.hpp</label>
        <link refid="f__one__max__epistasis_8hpp"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>src/Problems/BBOB/f_ellipsoid.hpp</label>
        <link refid="f__ellipsoid_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>src/Problems/BBOB/f_step_ellipsoid.hpp</label>
        <link refid="f__step__ellipsoid_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>src/Template/IOHprofiler_observer.cpp</label>
        <link refid="_i_o_hprofiler__observer_8cpp"/>
      </node>
      <node id="38">
        <label>src/Problems/IOHprofiler_all_problems.hpp</label>
        <link refid="_i_o_hprofiler__all__problems_8hpp_source"/>
      </node>
      <node id="13">
        <label>src/Problems/BBOB/f_gallagher101.hpp</label>
        <link refid="f__gallagher101_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>src/Problems/BBOB/f_linear_slope.hpp</label>
        <link refid="f__linear__slope_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>src/Problems/PBO/f_one_max.hpp</label>
        <link refid="f__one__max_8hpp"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>src/Problems/BBOB/f_rosenbrock_rotated.hpp</label>
        <link refid="f__rosenbrock__rotated_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>src/Template/IOHprofiler_transformation.cpp</label>
        <link refid="_i_o_hprofiler__transformation_8cpp"/>
      </node>
      <node id="33">
        <label>src/Problems/PBO/f_ising_ring.hpp</label>
        <link refid="f__ising__ring_8hpp"/>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>src/Problems/BBOB/f_schaffers1000.hpp</label>
        <link refid="f__schaffers1000_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>src/Problems/BBOB/f_bent_cigar.hpp</label>
        <link refid="f__bent__cigar_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>src/Problems/PBO/f_one_max_neutrality.hpp</label>
        <link refid="f__one__max__neutrality_8hpp"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>src/Template/Experiments/IOHprofiler_experimenter.h</label>
        <link refid="_i_o_hprofiler__experimenter_8h_source"/>
      </node>
      <node id="47">
        <label>src/Problems/PBO/f_linear.hpp</label>
        <link refid="f__linear_8hpp"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>src/Problems/BBOB/f_rastrigin_rotated.hpp</label>
        <link refid="f__rastrigin__rotated_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>src/Suites/IOHprofiler_PBO_suite.hpp</label>
        <link refid="_i_o_hprofiler___p_b_o__suite_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>src/Problems/BBOB/f_schwefel.hpp</label>
        <link refid="f__schwefel_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>src/Problems/PBO/f_leading_ones_dummy2.hpp</label>
        <link refid="f__leading__ones__dummy2_8hpp"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>src/Template/Loggers/IOHprofiler_csv_logger.cpp</label>
        <link refid="_i_o_hprofiler__csv__logger_8cpp"/>
      </node>
      <node id="2">
        <label>src/Problems/BBOB/bbob_common_used_functions/coco_transformation.hpp</label>
        <link refid="coco__transformation_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>src/Template/IOHprofiler_observer.h</label>
        <link refid="_i_o_hprofiler__observer_8h"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>src/Template/IOHprofiler_suite.h</label>
        <link refid="_i_o_hprofiler__suite_8h"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>src/Problems/WModel/f_w_model_leading_ones.hpp</label>
        <link refid="f__w__model__leading__ones_8hpp"/>
      </node>
      <node id="32">
        <label>src/Problems/PBO/f_concatenated_trap.hpp</label>
        <link refid="f__concatenated__trap_8hpp_source"/>
      </node>
      <node id="27">
        <label>src/Problems/BBOB/f_sphere.hpp</label>
        <link refid="f__sphere_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>src/Template/IOHprofiler_transformation.h</label>
        <link refid="_i_o_hprofiler__transformation_8h_source"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>src/Problems/PBO/f_nk_landscapes.hpp</label>
        <link refid="f__nk__landscapes_8hpp"/>
      </node>
      <node id="5">
        <label>src/Suites/IOHprofiler_all_suites.hpp</label>
        <link refid="_i_o_hprofiler__all__suites_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>src/Problems/BBOB/f_discus.hpp</label>
        <link refid="f__discus_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>src/Problems/PBO/f_ising_triangular.hpp</label>
        <link refid="f__ising__triangular_8hpp"/>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>src/Problems/PBO/f_leading_ones_dummy1.hpp</label>
        <link refid="f__leading__ones__dummy1_8hpp"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>src/Problems/BBOB/f_bueche_rastrigin.hpp</label>
        <link refid="f__bueche__rastrigin_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>src/Problems/BBOB/f_lunacek_bi_rastrigin.hpp</label>
        <link refid="f__lunacek__bi__rastrigin_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>src/Problems/BBOB/f_schaffers10.hpp</label>
        <link refid="f__schaffers10_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>src/Problems/PBO/f_N_queens.hpp</label>
        <link refid="f___n__queens_8hpp"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>src/Problems/PBO/f_labs.hpp</label>
        <link refid="f__labs_8hpp"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>src/Problems/PBO/f_MIS.hpp</label>
        <link refid="f___m_i_s_8hpp"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>src/Problems/PBO/f_one_max_dummy1.hpp</label>
        <link refid="f__one__max__dummy1_8hpp"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>src/Problems/BBOB/f_attractive_sector.hpp</label>
        <link refid="f__attractive__sector_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>src/Problems/PBO/f_leading_ones_ruggedness2.hpp</label>
        <link refid="f__leading__ones__ruggedness2_8hpp"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>src/Problems/PBO/f_leading_ones_ruggedness3.hpp</label>
        <link refid="f__leading__ones__ruggedness3_8hpp"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>src/Problems/BBOB/f_gallagher21.hpp</label>
        <link refid="f__gallagher21_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/Problems/BBOB/bbob_common_used_functions/coco_transformation_vars.hpp</label>
        <link refid="coco__transformation__vars_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>src/Problems/WModel/f_w_model_one_max.hpp</label>
        <link refid="f__w__model__one__max_8hpp"/>
      </node>
      <node id="26">
        <label>src/Problems/BBOB/f_sharp_ridge.hpp</label>
        <link refid="f__sharp__ridge_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>src/Problems/BBOB/f_weierstrass.hpp</label>
        <link refid="f__weierstrass_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>src/Problems/PBO/f_one_max_ruggedness1.hpp</label>
        <link refid="f__one__max__ruggedness1_8hpp"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>src/Problems/BBOB/f_griewank_rosenbrock.hpp</label>
        <link refid="f__griewank__rosenbrock_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>src/Problems/PBO/f_one_max_ruggedness2.hpp</label>
        <link refid="f__one__max__ruggedness2_8hpp"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="coco__transformation__vars_8hpp_1a5b211bedd46230c304320b0f724bfa20" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void transform_vars_affine_evaluate_function</definition>
        <argsstring>(std::vector&lt; double &gt; &amp;x, const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;M, const std::vector&lt; double &gt; &amp;b)</argsstring>
        <name>transform_vars_affine_evaluate_function</name>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
          <declname>M</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Problems/BBOB/bbob_common_used_functions/coco_transformation_vars.hpp" line="6" column="13" bodyfile="src/Problems/BBOB/bbob_common_used_functions/coco_transformation_vars.hpp" bodystart="6" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="coco__transformation__vars_8hpp_1aab633d5f17a8282cbc39f4034cdc1014" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void transform_vars_asymmetric_evaluate_function</definition>
        <argsstring>(std::vector&lt; double &gt; &amp;x, const double beta)</argsstring>
        <name>transform_vars_asymmetric_evaluate_function</name>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Problems/BBOB/bbob_common_used_functions/coco_transformation_vars.hpp" line="23" column="13" bodyfile="src/Problems/BBOB/bbob_common_used_functions/coco_transformation_vars.hpp" bodystart="23" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="coco__transformation__vars_8hpp_1aa9eb2bb3464240ed469f20fde715f675" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void transform_vars_brs_evaluate</definition>
        <argsstring>(std::vector&lt; double &gt; &amp;x)</argsstring>
        <name>transform_vars_brs_evaluate</name>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Problems/BBOB/bbob_common_used_functions/coco_transformation_vars.hpp" line="38" column="13" bodyfile="src/Problems/BBOB/bbob_common_used_functions/coco_transformation_vars.hpp" bodystart="38" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="coco__transformation__vars_8hpp_1a6f207b94ef1f046ddad563284880b5c2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void transform_vars_conditioning_evaluate</definition>
        <argsstring>(std::vector&lt; double &gt; &amp;x, const double alpha)</argsstring>
        <name>transform_vars_conditioning_evaluate</name>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Problems/BBOB/bbob_common_used_functions/coco_transformation_vars.hpp" line="60" column="13" bodyfile="src/Problems/BBOB/bbob_common_used_functions/coco_transformation_vars.hpp" bodystart="60" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="coco__transformation__vars_8hpp_1aedab87e6a7bb47f87c398e35e865418f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void transform_vars_oscillate_evaluate_function</definition>
        <argsstring>(std::vector&lt; double &gt; &amp;x)</argsstring>
        <name>transform_vars_oscillate_evaluate_function</name>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Problems/BBOB/bbob_common_used_functions/coco_transformation_vars.hpp" line="73" column="13" bodyfile="src/Problems/BBOB/bbob_common_used_functions/coco_transformation_vars.hpp" bodystart="73" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="coco__transformation__vars_8hpp_1a59f848e0dc071ba2977d3a2122006268" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void transform_vars_scale_evaluate</definition>
        <argsstring>(std::vector&lt; double &gt; &amp;x, const double factor)</argsstring>
        <name>transform_vars_scale_evaluate</name>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Problems/BBOB/bbob_common_used_functions/coco_transformation_vars.hpp" line="94" column="13" bodyfile="src/Problems/BBOB/bbob_common_used_functions/coco_transformation_vars.hpp" bodystart="94" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="coco__transformation__vars_8hpp_1ab905d67956153bb70c7607d7ac07ec00" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void transform_vars_shift_evaluate_function</definition>
        <argsstring>(std::vector&lt; double &gt; &amp;x, const std::vector&lt; double &gt; &amp;offset)</argsstring>
        <name>transform_vars_shift_evaluate_function</name>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Problems/BBOB/bbob_common_used_functions/coco_transformation_vars.hpp" line="103" column="13" bodyfile="src/Problems/BBOB/bbob_common_used_functions/coco_transformation_vars.hpp" bodystart="103" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="coco__transformation__vars_8hpp_1aa2a58c3cee81e2de848bf3467a3fa91d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void transform_vars_x_hat_evaluate</definition>
        <argsstring>(std::vector&lt; double &gt; &amp;x, const long seed)</argsstring>
        <name>transform_vars_x_hat_evaluate</name>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const long</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Problems/BBOB/bbob_common_used_functions/coco_transformation_vars.hpp" line="112" column="13" bodyfile="src/Problems/BBOB/bbob_common_used_functions/coco_transformation_vars.hpp" bodystart="112" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="coco__transformation__vars_8hpp_1a65ba1aa534b34e82a8b0d2e9f307a375" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void transform_vars_x_hat_generic_evaluate</definition>
        <argsstring>(std::vector&lt; double &gt; &amp;x, const std::vector&lt; double &gt; &amp;sign_vector)</argsstring>
        <name>transform_vars_x_hat_generic_evaluate</name>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>sign_vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Problems/BBOB/bbob_common_used_functions/coco_transformation_vars.hpp" line="129" column="13" bodyfile="src/Problems/BBOB/bbob_common_used_functions/coco_transformation_vars.hpp" bodystart="129" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="coco__transformation__vars_8hpp_1ad2f9576703436e7d7c0515250979ad9a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void transform_vars_z_hat_evaluate</definition>
        <argsstring>(std::vector&lt; double &gt; &amp;x, const std::vector&lt; double &gt; &amp;xopt)</argsstring>
        <name>transform_vars_z_hat_evaluate</name>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>xopt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Problems/BBOB/bbob_common_used_functions/coco_transformation_vars.hpp" line="138" column="13" bodyfile="src/Problems/BBOB/bbob_common_used_functions/coco_transformation_vars.hpp" bodystart="138" bodyend="147"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>_COCO_TRANSFORMATION_VARS_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_COCO_TRANSFORMATION_VARS_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;suite_bbob_legacy_code.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>transform_vars_affine_evaluate_function(std::vector&lt;double&gt;<sp/>&amp;x,<sp/></highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;double&gt;<sp/>&gt;<sp/>&amp;M,</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;<sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_variables<sp/>=<sp/>x.size();</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*cons_values;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is_feasible;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>temp_x<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>number_of_variables;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>data-&gt;M<sp/>has<sp/>problem-&gt;number_of_variables<sp/>columns<sp/>and<sp/>inner_problem-&gt;number_of_variables<sp/>rows.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>b[i];</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>number_of_variables;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>+=<sp/>temp_x[j]<sp/>*<sp/>M[i][j];</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>transform_vars_asymmetric_evaluate_function(std::vector<sp/>&lt;double&gt;<sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>beta)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>exponent;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_variables<sp/>=<sp/>x.size();</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>number_of_variables;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x[i]<sp/>&gt;<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exponent<sp/>=<sp/>1.0</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>((beta<sp/>*<sp/>(double)<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>i)<sp/>/<sp/>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>(long)<sp/>number_of_variables<sp/>-<sp/>1.0))<sp/>*<sp/>sqrt(x[i]);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>pow(x[i],<sp/>exponent);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>x[i];</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>transform_vars_brs_evaluate(std::vector&lt;double&gt;<sp/>&amp;x)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>factor;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_variables<sp/>=<sp/>x.size();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>number_of_variables;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Function<sp/>documentation<sp/>says<sp/>we<sp/>should<sp/>compute<sp/>10^(0.5<sp/>*</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>(i-1)/(D-1)).<sp/>Instead<sp/>we<sp/>compute<sp/>the<sp/>equivalent</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>sqrt(10)^((i-1)/(D-1))<sp/>just<sp/>like<sp/>the<sp/>legacy<sp/>code.</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>factor<sp/>=<sp/>pow(sqrt(10.0),<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>i<sp/>/<sp/>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>number_of_variables<sp/>-<sp/>1.0));</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Documentation<sp/>specifies<sp/>odd<sp/>indices<sp/>and<sp/>starts<sp/>indexing</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>from<sp/>1,<sp/>we<sp/>use<sp/>all<sp/>even<sp/>indices<sp/>since<sp/>C<sp/>starts<sp/>indexing</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>with<sp/>0.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x[i]<sp/>&gt;<sp/>0.0<sp/>&amp;&amp;<sp/>i<sp/>%<sp/>2<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>factor<sp/>*=<sp/>10.0;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>factor<sp/>*<sp/>x[i];</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>transform_vars_conditioning_evaluate(std::vector&lt;double&gt;<sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>alpha)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_variables<sp/>=<sp/>x.size();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>number_of_variables;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>OME:<sp/>We<sp/>could<sp/>precalculate<sp/>the<sp/>scaling<sp/>coefficients<sp/>if<sp/>we</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>really<sp/>wanted<sp/>to.</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>pow(alpha,<sp/>0.5<sp/>*<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>i<sp/>/<sp/>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>number_of_variables<sp/>-<sp/>1.0))</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>x[i];</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>transform_vars_oscillate_evaluate_function(std::vector&lt;double&gt;<sp/>&amp;x)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>alpha<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_variables<sp/>=<sp/>x.size();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tmp,<sp/>base;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>number_of_variables;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x[i]<sp/>&gt;<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>log(x[i])<sp/>/<sp/>alpha;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base<sp/>=<sp/>exp(tmp<sp/>+<sp/>0.49<sp/>*<sp/>(sin(tmp)<sp/>+<sp/>sin(0.79<sp/>*<sp/>tmp)));</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>pow(base,<sp/>alpha);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x[i]<sp/>&lt;<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>log(-x[i])<sp/>/<sp/>alpha;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base<sp/>=<sp/>exp(tmp<sp/>+<sp/>0.49<sp/>*<sp/>(sin(0.55<sp/>*<sp/>tmp)<sp/>+<sp/>sin(0.31<sp/>*<sp/>tmp)));</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>-pow(base,<sp/>alpha);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>transform_vars_scale_evaluate(std::vector&lt;double&gt;<sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>factor)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_variables<sp/>=<sp/>x.size();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>number_of_variables;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>factor<sp/>*<sp/>x[i];</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>transform_vars_shift_evaluate_function(std::vector&lt;double&gt;<sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;<sp/>&amp;offset)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_variables<sp/>=<sp/>x.size();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>number_of_variables;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>x[i]<sp/>-<sp/>offset[i];</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>transform_vars_x_hat_evaluate(std::vector&lt;double&gt;<sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>seed)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_variables<sp/>=<sp/>x.size();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>tmp_x;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>bbob2009_unif(tmp_x,<sp/>number_of_variables,<sp/>seed);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>number_of_variables;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp_x[i]<sp/>&lt;<sp/>0.5)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>-x[i];</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>x[i];</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>transform_vars_x_hat_generic_evaluate(std::vector&lt;double&gt;<sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;<sp/>&amp;sign_vector)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_variables<sp/>=<sp/>x.size();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>number_of_variables;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>2.0<sp/>*<sp/>sign_vector[i]<sp/>*<sp/>x[i];</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>transform_vars_z_hat_evaluate(std::vector&lt;double&gt;<sp/>&amp;x,<sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;<sp/>&amp;xopt)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_variables<sp/>=<sp/>x.size();</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>temp_x<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>x[0]<sp/>=<sp/>temp_x[0];</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>number_of_variables;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>temp_x[i]<sp/>+<sp/>0.25<sp/>*<sp/>(temp_x[i<sp/>-<sp/>1]<sp/>-<sp/>2.0<sp/>*<sp/>fabs(xopt[i<sp/>-<sp/>1]));</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/Problems/BBOB/bbob_common_used_functions/coco_transformation_vars.hpp"/>
  </compounddef>
</doxygen>
