<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.19">
  <compounddef id="_i_o_hprofiler__string_8hpp" kind="file" language="C++">
    <compoundname>IOHprofiler_string.hpp</compoundname>
    <includes local="no">sstream</includes>
    <includes refid="_i_o_hprofiler__common_8h" local="yes">IOHprofiler_common.h</includes>
    <includedby refid="_i_o_hprofiler__configuration_8h" local="yes">src/Template/Experiments/IOHprofiler_configuration.h</includedby>
    <incdepgraph>
      <node id="6">
        <label>sys/stat.h</label>
      </node>
      <node id="17">
        <label>limits</label>
      </node>
      <node id="1">
        <label>src/Template/Experiments/IOHprofiler_string.hpp</label>
        <link refid="_i_o_hprofiler__string_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>cmath</label>
      </node>
      <node id="13">
        <label>cassert</label>
      </node>
      <node id="11">
        <label>string</label>
      </node>
      <node id="21">
        <label>map</label>
      </node>
      <node id="18">
        <label>cfloat</label>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="10">
        <label>fstream</label>
      </node>
      <node id="3">
        <label>IOHprofiler_common.h</label>
        <link refid="_i_o_hprofiler__common_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>unistd.h</label>
      </node>
      <node id="12">
        <label>vector</label>
      </node>
      <node id="2">
        <label>sstream</label>
      </node>
      <node id="15">
        <label>cstdlib</label>
      </node>
      <node id="9">
        <label>iostream</label>
      </node>
      <node id="16">
        <label>cstddef</label>
      </node>
      <node id="4">
        <label>IOHprofiler_platform.h</label>
        <link refid="_i_o_hprofiler__platform_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>algorithm</label>
      </node>
      <node id="20">
        <label>memory</label>
      </node>
      <node id="8">
        <label>dirent.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>src/Template/Experiments/IOHprofiler_string.hpp</label>
        <link refid="_i_o_hprofiler__string_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>src/Template/Experiments/IOHprofiler_experimenter.h</label>
        <link refid="_i_o_hprofiler__experimenter_8h_source"/>
      </node>
      <node id="3">
        <label>src/Template/Experiments/IOHprofiler_configuration.cpp</label>
        <link refid="_i_o_hprofiler__configuration_8cpp"/>
      </node>
      <node id="2">
        <label>src/Template/Experiments/IOHprofiler_configuration.h</label>
        <link refid="_i_o_hprofiler__configuration_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_i_o_hprofiler__string_8hpp_1aa1a5d11ea1755d1046fe4b0c02a65997" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string strstrip</definition>
        <argsstring>(std::string s)</argsstring>
        <name>strstrip</name>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>To erase blanks in the front and end of a string. </para>
        </briefdescription>
        <detaileddescription>
<para>\para s string <simplesect kind="return"><para>string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>For string line end with &apos;\r&apos; in windows systems.</para>
        </inbodydescription>
        <location file="src/Template/Experiments/IOHprofiler_string.hpp" line="17" column="20" bodyfile="src/Template/Experiments/IOHprofiler_string.hpp" bodystart="17" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="_i_o_hprofiler__string_8hpp_1a969cda1560fc9180c3d21e68afb04faf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt; int &gt; get_int_vector_parse_string</definition>
        <argsstring>(std::string input, const int _min, const int _max)</argsstring>
        <name>get_int_vector_parse_string</name>
        <param>
          <type>std::string</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>_min</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>_max</declname>
        </param>
        <briefdescription>
<para>To get a vector of integer values with a range &apos;n-m&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para>Return a vector of integer value. The supported formats are: &apos;-m&apos;, [_min, m] &apos;n-&apos;, [n, _max] &apos;n-m&apos;, [n, m] &apos;n-x-y-z-m&apos;, [n,m] \para input string \para _int int \para _max int <simplesect kind="return"><para>std::vector&lt;int&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>The condition beginning with &quot;-m&quot;</para>
<para>The condition endding with &quot;n-&quot;</para>
<para>The condition with &quot;n-m,n-x-m&quot;</para>
        </inbodydescription>
        <location file="src/Template/Experiments/IOHprofiler_string.hpp" line="41" column="20" bodyfile="src/Template/Experiments/IOHprofiler_string.hpp" bodystart="41" bodyend="121"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>head file for common used operations on strings. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Furong Ye </para>
</simplesect>
<simplesect kind="date"><para>2019-06-27 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>_IOHPROFILER_STRING_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_IOHPROFILER_STRING_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;IOHprofiler_common.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>strstrip(std::string<sp/>s)</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.empty())<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>s.erase(0,s.find_first_not_of(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>s.erase(s.find_last_not_of(</highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>s.erase(s.find_last_not_of(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>get_int_vector_parse_string(std::string<sp/>input,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_min,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_max)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>spiltstring;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>std::string<sp/>tmp;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tmpvalue,tmpvalue1;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>result;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>input.size();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>input<sp/>=<sp/>strstrip(input);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input[i]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>input[i]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>!isdigit(input[i]))<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IOH_error(</highlight><highlight class="stringliteral">&quot;The<sp/>configuration<sp/>consists<sp/>invalid<sp/>characters.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>raw(input);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(getline(raw,<sp/>tmp,<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">))<sp/>spiltstring.push_back(tmp);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>spiltstring.size();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>spiltstring[i].size();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spiltstring[i][0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IOH_error(</highlight><highlight class="stringliteral">&quot;Format<sp/>error<sp/>in<sp/>configuration.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>spiltstring[i].substr(1);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp.find(</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IOH_error(</highlight><highlight class="stringliteral">&quot;Format<sp/>error<sp/>in<sp/>configuration.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpvalue<sp/>=<sp/>std::stoi(tmp);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmpvalue<sp/>&lt;<sp/>_min)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IOH_error(</highlight><highlight class="stringliteral">&quot;Input<sp/>value<sp/>exceeds<sp/>lowerbound.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>_min;<sp/>value<sp/>&lt;=<sp/>tmpvalue;<sp/>++value)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(value);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(spiltstring[i][spiltstring[i].length()-1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>spiltstring.size()<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IOH_error(</highlight><highlight class="stringliteral">&quot;Format<sp/>error<sp/>in<sp/>configuration.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>spiltstring[i].substr(0,spiltstring[i].length()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp.find(</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IOH_error(</highlight><highlight class="stringliteral">&quot;Format<sp/>error<sp/>in<sp/>configuration.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpvalue<sp/>=<sp/>std::stoi(tmp);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmpvalue<sp/>&gt;<sp/>_max)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IOH_error(</highlight><highlight class="stringliteral">&quot;Input<sp/>value<sp/>exceeds<sp/>upperbound.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>_max;<sp/>value<sp/>&lt;=<sp/>tmpvalue;<sp/>--value)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(value);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>tempraw(spiltstring[i]);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>tmpvaluevector;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(getline(tempraw,<sp/>tmp,<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpvaluevector.push_back(tmp);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmpvalue<sp/>=<sp/>std::stoi(tmpvaluevector[0]);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmpvalue1<sp/>=<sp/>std::stoi(tmpvaluevector[tmpvaluevector.size()-1]);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmpvalue<sp/>&gt;<sp/>tmpvalue1)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IOH_error(</highlight><highlight class="stringliteral">&quot;Format<sp/>error<sp/>in<sp/>configuration.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmpvalue<sp/>&lt;<sp/>_min)<sp/><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IOH_error(</highlight><highlight class="stringliteral">&quot;Input<sp/>value<sp/>exceeds<sp/>lowerbound.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmpvalue1<sp/>&gt;<sp/>_max)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IOH_error(</highlight><highlight class="stringliteral">&quot;Input<sp/>value<sp/>exceeds<sp/>upperbound.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>tmpvalue;<sp/>value<sp/>&lt;=<sp/>tmpvalue1;<sp/>++value)<sp/>result.push_back(value);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//_IOHPROFILER_STRING_HPP</highlight></codeline>
    </programlisting>
    <location file="src/Template/Experiments/IOHprofiler_string.hpp"/>
  </compounddef>
</doxygen>
